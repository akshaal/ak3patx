// This file is auto-generated by src/avr/maintain-protocol script! DON'T EDIT!

export const avrProtocolVersion = 0x4b;

export interface AvrData {
    "u32 uptime_deciseconds": number,
    "u8 usart0_rx_overflow_count": number,
    "u32 main_loop_iterations_in_last_decisecond": number,
    "u8 ds18b20_onboard.get_crc_errors()": number,
    "u8 ds18b20_onboard.get_disconnects()": number,
    "u16 ds18b20_onboard.get_temperatureX16()": number,
    "u8 ds18b20_onboard.get_update_id()": number,
    "u8 ds18b20_onboard.get_updated_deciseconds_ago()": number,
    "u8 ds18b20_ext.get_crc_errors()": number,
    "u8 ds18b20_ext.get_disconnects()": number,
    "u16 ds18b20_ext.get_temperatureX16()": number,
    "u8 ds18b20_ext.get_update_id()": number,
    "u8 ds18b20_ext.get_updated_deciseconds_ago()": number,
}

export function asAvrData(vals: {[id: string]: number}): AvrData { return {
    "u32 uptime_deciseconds": vals["A1"],
    "u8 usart0_rx_overflow_count": vals["A2"],
    "u32 main_loop_iterations_in_last_decisecond": vals["A3"],
    "u8 ds18b20_onboard.get_crc_errors()": vals["B1"],
    "u8 ds18b20_onboard.get_disconnects()": vals["B2"],
    "u16 ds18b20_onboard.get_temperatureX16()": vals["B3"],
    "u8 ds18b20_onboard.get_update_id()": vals["B4"],
    "u8 ds18b20_onboard.get_updated_deciseconds_ago()": vals["B5"],
    "u8 ds18b20_ext.get_crc_errors()": vals["C1"],
    "u8 ds18b20_ext.get_disconnects()": vals["C2"],
    "u16 ds18b20_ext.get_temperatureX16()": vals["C3"],
    "u8 ds18b20_ext.get_update_id()": vals["C4"],
    "u8 ds18b20_ext.get_updated_deciseconds_ago()": vals["C5"],
};}

